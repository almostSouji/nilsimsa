"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compare = exports.digest = void 0;
const TRAN = [
    0x02, 0xd6, 0x9e, 0x6f, 0xf9, 0x1d, 0x04, 0xab, 0xd0, 0x22, 0x16, 0x1f, 0xd8,
    0x73, 0xa1, 0xac, 0x3b, 0x70, 0x62, 0x96, 0x1e, 0x6e, 0x8f, 0x39, 0x9d, 0x05,
    0x14, 0x4a, 0xa6, 0xbe, 0xae, 0x0e, 0xcf, 0xb9, 0x9c, 0x9a, 0xc7, 0x68, 0x13,
    0xe1, 0x2d, 0xa4, 0xeb, 0x51, 0x8d, 0x64, 0x6b, 0x50, 0x23, 0x80, 0x03, 0x41,
    0xec, 0xbb, 0x71, 0xcc, 0x7a, 0x86, 0x7f, 0x98, 0xf2, 0x36, 0x5e, 0xee, 0x8e,
    0xce, 0x4f, 0xb8, 0x32, 0xb6, 0x5f, 0x59, 0xdc, 0x1b, 0x31, 0x4c, 0x7b, 0xf0,
    0x63, 0x01, 0x6c, 0xba, 0x07, 0xe8, 0x12, 0x77, 0x49, 0x3c, 0xda, 0x46, 0xfe,
    0x2f, 0x79, 0x1c, 0x9b, 0x30, 0xe3, 0x00, 0x06, 0x7e, 0x2e, 0x0f, 0x38, 0x33,
    0x21, 0xad, 0xa5, 0x54, 0xca, 0xa7, 0x29, 0xfc, 0x5a, 0x47, 0x69, 0x7d, 0xc5,
    0x95, 0xb5, 0xf4, 0x0b, 0x90, 0xa3, 0x81, 0x6d, 0x25, 0x55, 0x35, 0xf5, 0x75,
    0x74, 0x0a, 0x26, 0xbf, 0x19, 0x5c, 0x1a, 0xc6, 0xff, 0x99, 0x5d, 0x84, 0xaa,
    0x66, 0x3e, 0xaf, 0x78, 0xb3, 0x20, 0x43, 0xc1, 0xed, 0x24, 0xea, 0xe6, 0x3f,
    0x18, 0xf3, 0xa0, 0x42, 0x57, 0x08, 0x53, 0x60, 0xc3, 0xc0, 0x83, 0x40, 0x82,
    0xd7, 0x09, 0xbd, 0x44, 0x2a, 0x67, 0xa8, 0x93, 0xe0, 0xc2, 0x56, 0x9f, 0xd9,
    0xdd, 0x85, 0x15, 0xb4, 0x8a, 0x27, 0x28, 0x92, 0x76, 0xde, 0xef, 0xf8, 0xb2,
    0xb7, 0xc9, 0x3d, 0x45, 0x94, 0x4b, 0x11, 0x0d, 0x65, 0xd5, 0x34, 0x8b, 0x91,
    0x0c, 0xfa, 0x87, 0xe9, 0x7c, 0x5b, 0xb1, 0x4d, 0xe5, 0xd4, 0xcb, 0x10, 0xa2,
    0x17, 0x89, 0xbc, 0xdb, 0xb0, 0xe2, 0x97, 0x88, 0x52, 0xf7, 0x48, 0xd3, 0x61,
    0x2c, 0x3a, 0x2b, 0xd1, 0x8c, 0xfb, 0xf1, 0xcd, 0xe4, 0x6a, 0xe7, 0xa9, 0xfd,
    0xc4, 0x37, 0xc8, 0xd2, 0xf6, 0xdf, 0x58, 0x72, 0x4e,
];
const POPC = [
    0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03, 0x01, 0x02, 0x02, 0x03, 0x02,
    0x03, 0x03, 0x04, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03,
    0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03,
    0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x02, 0x03, 0x03, 0x04,
    0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x01,
    0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
    0x04, 0x05, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04,
    0x05, 0x04, 0x05, 0x05, 0x06, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04,
    0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x01, 0x02,
    0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04,
    0x05, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
    0x04, 0x05, 0x05, 0x06, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03,
    0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
    0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x02, 0x03, 0x03,
    0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
    0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05,
    0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
    0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06,
    0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
];
function toHexString(byteArray) {
    return byteArray
        .map((byte) => `0${(byte & 0xff).toString(16)}`.slice(-2))
        .join("");
}
function tran53(a, b, c, n) {
    return (((TRAN[(a + n) & 0xff] ^ (TRAN[b] * (n + n + 1))) +
        TRAN[(0xff & c) ^ TRAN[n]]) &
        0xff);
}
function digest(input, raw) {
    if (typeof input === 'string')
        input = Buffer.from(input);
    const acc = Array(256).fill(0);
    let window = [];
    for (let offset = 0; offset < input.length; offset++) {
        const c = input.readUInt8(offset);
        if (window.length > 1) {
            acc[tran53(c, window[0], window[1], 0)] += 1;
        }
        if (window.length > 2) {
            acc[tran53(c, window[0], window[2], 1)] += 1;
            acc[tran53(c, window[1], window[2], 2)] += 1;
        }
        if (window.length > 3) {
            acc[tran53(c, window[0], window[3], 3)] += 1;
            acc[tran53(c, window[1], window[3], 4)] += 1;
            acc[tran53(c, window[2], window[3], 5)] += 1;
            acc[tran53(window[3], window[0], c, 6)] += 1;
            acc[tran53(window[3], window[2], c, 7)] += 1;
        }
        if (window.length < 4) {
            window.unshift(c);
        }
        else {
            window = [c, ...window.slice(0, 3)];
        }
    }
    const numTrigrams = input.length === 3
        ? 1
        : input.length === 4
            ? 4
            : input.length > 4
                ? 8 * input.length - 28
                : 0;
    const threshold = numTrigrams / 256;
    const digest = Array(32).fill(0);
    for (let i = 0; i <= 256; i++) {
        if (acc[i] > threshold) {
            digest[i >> 3] += 1 << (i & 7);
        }
    }
    const rev = digest.reverse();
    return raw ? rev : toHexString(rev);
}
exports.digest = digest;
/**
 * Compare two nilsimsa digests (byte array or hex string). Values range from -128 (max difference) to 128 (max similarity)
 * @param a - The first digest to compare
 * @param b - The second digest to compare
 * @returns Distance value
 */
function compare(a, b) {
    if (a instanceof Array)
        a = toHexString(a);
    if (b instanceof Array)
        b = toHexString(b);
    let bits = 0;
    for (let i = 0; i <= 62; i += 2) {
        bits +=
            POPC[(255 & parseInt(a.slice(i, i + 2), 16)) ^
                parseInt(b.slice(i, i + 2), 16)];
    }
    return 128 - bits;
}
exports.compare = compare;
//# sourceMappingURL=index.js.map